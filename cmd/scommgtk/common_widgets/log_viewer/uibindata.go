// Code generated by go-bindata.
// sources:
// ui/widget.glade
// DO NOT EDIT!

package log_viewer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiWidgetGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xdc\xb9\x56\x21\xb4\x55\xa5\x1e\x92\xec\x8d\xbd\x70\xa8\xb4\xb4\x3d\x46\x4e\x3c\x84\x29\x8e\x9d\xda\x03\x81\xfe\xfa\x0a\xd8\x2d\x5f\x49\x37\xa1\x5f\x7b\xe0\x06\xf2\x7b\xf6\x7b\xf3\xf1\xa4\x44\x77\xeb\x52\x8b\x15\x3a\x4f\xd6\xc4\xf0\x66\x38\x02\x81\x26\xb7\x8a\x4c\x11\xc3\xa7\xe9\x38\xf8\x00\x77\xc9\x20\x7a\x15\x04\xe2\x1e\x0d\x3a\xc9\xa8\x44\x4d\x3c\x17\x85\x96\x0a\xc5\xbb\xe1\xdb\xd1\x70\x24\x82\x20\x19\x44\x64\x18\xdd\x4c\xe6\x98\x0c\x84\x88\x1c\x7e\x5b\x92\x43\x2f\x34\x65\x31\x14\xbc\x78\x0d\x87\x87\xb6\x34\x08\x77\x38\x9b\x7d\xc5\x9c\x45\xae\xa5\xf7\x31\xdc\xf3\xe2\xa3\x34\xa8\x40\x90\x8a\xc1\x59\xcb\xb0\x45\x09\x11\x55\xce\x56\xe8\x78\x23\x8c\x2c\x31\x86\x15\x79\xca\x34\x42\x32\x75\x4b\x8c\xc2\xa7\xd3\x66\x70\x2e\x4d\x3a\xb3\xf9\xd2\xb7\xc0\xf3\x39\x69\xb5\xff\xdd\xa4\x68\xec\x64\x89\xf0\x74\xde\x53\xcb\x33\x7a\xc6\x52\xfb\x4e\x9c\x52\xba\x82\x4c\xaa\x71\xc6\x90\xbc\xef\xc1\x70\x54\xcc\x7b\x52\xd8\x56\xfd\x08\x99\x65\xb6\x65\x47\x8e\x96\x19\xea\x74\x2d\x35\x15\x06\x92\x51\x17\x8a\x9f\x4b\x65\xeb\x94\x37\x15\x42\x62\xac\x69\xae\xd8\x49\x1b\x9b\x5b\xf9\x90\x3b\xab\x35\xaa\x2f\x64\x94\xad\xe1\x18\x7c\x45\x5f\xaf\x98\xb5\x4e\x0e\xc9\xb4\xd2\x2e\x3c\x36\xfb\x9c\x3a\xc4\xcf\x84\xf5\x7e\x8f\xd8\x21\xae\x52\x6d\x0b\x38\x67\x5e\x69\xfa\x37\x8c\x1f\x5c\x88\x5d\x60\x18\xa9\x83\xdd\xdf\x18\x3c\x6a\xcc\x99\xac\x69\x90\xd9\x66\xf2\xe1\x27\x27\x6c\x78\x27\x6c\x2e\x57\xb8\xbf\xea\xac\xb4\x97\xe0\x4b\xe0\x05\xe8\xd1\xca\xb6\x6f\x8f\x93\x0d\xbf\x9e\xc0\xc9\x05\xe6\xcf\x0f\x5e\x6b\xa8\x34\xf1\xf6\xa2\x05\x3b\x69\xbc\x96\x2c\x33\x8d\x31\x6c\xd0\x43\x32\xb1\x85\x98\x90\xe7\xe6\x9b\x9e\x2d\xce\x39\x20\xaa\x64\xbe\x20\x53\xb4\xaf\xb9\x43\x4f\xdf\x7b\xe4\xa8\x9f\x3b\x32\x8b\x56\xbf\x51\x78\xf2\xe2\x89\xbc\x5b\xe6\xdf\x32\xff\x6f\xac\xde\xff\xcc\x7c\x5c\xf3\x51\xe6\xe3\x9a\x5f\x54\xe6\x9f\x51\x6b\x27\xab\xb4\xb4\x0a\x21\xa9\xad\x53\xed\xd4\x5b\x5a\x77\x4b\xeb\xf1\x52\x6b\xb1\x9d\x81\x7f\x1e\xd7\x9d\xf3\xec\xea\xbc\x3e\x68\x8b\xc2\xa3\xcf\x8c\x1f\x01\x00\x00\xff\xff\x5f\xc4\x7c\xc5\xbf\x0c\x00\x00")

func uiWidgetGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiWidgetGlade,
		"ui/widget.glade",
	)
}

func uiWidgetGlade() (*asset, error) {
	bytes, err := uiWidgetGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/widget.glade", size: 3263, mode: os.FileMode(420), modTime: time.Unix(1498105138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/widget.glade": uiWidgetGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"widget.glade": &bintree{uiWidgetGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

