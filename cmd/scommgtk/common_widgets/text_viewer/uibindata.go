// Code generated by go-bindata.
// sources:
// ui/text-view.glade
// DO NOT EDIT!

package text_viewer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiTextViewGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x4d\x6e\xdb\x30\x10\x85\xf7\x39\x05\xcb\x6d\xe1\x9f\xb4\x68\xd1\x85\xa4\x00\x29\x90\x1c\x20\x6e\xbb\x34\x68\x72\x2c\x4d\x43\x73\x54\x72\x2c\x3b\xb7\x2f\x6c\x25\x48\x1c\x51\x91\x64\x15\x68\x17\xdd\x09\xe0\x3c\x0f\x1f\xe7\x7d\x24\x9c\x5c\xed\x37\x56\x54\xe0\x03\x92\x4b\xe5\xe5\x74\x2e\x05\x38\x4d\x06\x5d\x9e\xca\x6f\x8b\x9b\xc9\x17\x79\x95\x5d\x24\xef\x26\x13\x71\x0b\x0e\xbc\x62\x30\x62\x87\x5c\x88\xdc\x2a\x03\xe2\xe3\xf4\xc3\x7c\x3a\x17\x93\x49\x76\x91\xa0\x63\xf0\x6b\xa5\x21\xbb\x10\x22\xf1\xf0\x6b\x8b\x1e\x82\xb0\xb8\x4a\x65\xce\xf7\xef\xe5\x73\xa3\x83\x4c\xce\x8e\x75\xb4\xfa\x09\x9a\x85\xb6\x2a\x84\x54\xde\xf2\xfd\x0f\x74\x86\x76\x52\xa0\x49\xa5\x27\x62\x79\x28\x13\x22\x29\x3d\x95\xe0\xf9\x41\x38\xb5\x81\x54\x6a\xe5\x96\x6b\xd2\xdb\x20\xb3\x1b\x65\x03\x24\xb3\xa7\x82\x78\xbd\x81\xb5\xda\x5a\x5e\xee\xd0\x70\x21\xb3\xcf\xf3\x79\x5f\x45\x01\x98\x17\x1c\x97\xe8\x02\xad\xa9\xbf\x63\x5e\xae\x69\x2f\x9f\x56\x9b\x0d\x2a\x0c\xb8\xb2\x20\xb3\x85\xdf\x36\xf6\x7f\x8e\xe7\x98\x66\xa3\x7c\x8e\x6e\x69\x61\xcd\x32\xfb\x34\x40\xe1\x6b\xd7\x43\x24\x4c\xe5\x30\xc1\x8a\x98\x69\xd3\x53\x43\x1e\xc1\xb1\x62\x24\x27\xb3\x0a\x3c\xa3\x56\xb6\x8f\x30\x94\x4a\xa3\xcb\xdb\xda\x9c\xcc\x30\x3e\xc7\x3b\xed\xc9\x5a\x30\x8f\xd9\x7c\x59\x7c\xc6\x58\x3b\x46\x3b\x44\x16\x0a\x65\x68\xb7\xe4\x87\x12\x64\x86\xae\x55\xd6\xf0\x18\xf7\xb9\x80\x3d\x7f\x47\x78\xa4\x8f\x5f\x3b\x3d\xdb\xed\x08\xc7\x31\x29\x18\x64\x75\x6c\xda\x8a\x41\x6b\xf0\xc8\xd1\x21\x0f\x9d\x1b\x4e\x66\xf5\xe9\xbc\x3a\xc8\x59\x33\x2d\x91\xc2\xa4\x54\xfa\x1e\x5d\xfe\xf6\xf0\x60\x5f\x2a\x67\x86\x0d\x7c\x8d\xd6\x0e\x53\x94\x14\xb0\x66\xa6\x71\x7d\x3d\x19\x68\xec\xb6\x61\xb3\x0f\x24\xd7\x5b\x66\x72\xa7\x57\x5e\x6c\x43\x63\xf9\x78\x73\xe6\xc3\xd8\x8f\x29\x0a\xda\x50\x0e\x0e\xa8\x93\xc5\x9e\x50\xd5\xe7\x52\x23\xb5\x3a\x7e\x2f\x83\xaa\xa0\x07\x5b\x56\xad\xc0\x4a\xc1\x5e\xb9\x60\xd5\x31\xf2\xa9\x7c\x80\x20\xb3\x3b\x55\x81\x58\x90\xb8\x41\x0b\xd3\xe9\x10\x00\xfe\x06\xaf\x1e\x34\x60\x05\x61\xf9\xf8\xa4\x9e\xc7\x5e\x1b\x56\xb1\x8e\x7d\xd0\x8a\xe9\xba\xf1\x8a\xa9\x3a\x11\x13\x71\xcc\x44\xfc\x46\x19\x15\x2d\x6d\x29\x8c\xcb\xd6\xd7\xc3\x2f\xfc\x8f\xd4\xbf\x12\xa9\xcb\x3f\x11\xa9\xf1\x8f\xd4\xa0\x5b\x77\xcc\x2b\xd5\xe2\xb7\xfb\x95\x3a\xf5\xf8\x62\xf1\x79\x21\x99\xbd\xf8\x93\xf2\x3b\x00\x00\xff\xff\x40\x11\x30\xa3\xfd\x0c\x00\x00")

func uiTextViewGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiTextViewGlade,
		"ui/text-view.glade",
	)
}

func uiTextViewGlade() (*asset, error) {
	bytes, err := uiTextViewGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/text-view.glade", size: 3325, mode: os.FileMode(420), modTime: time.Unix(1488446454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/text-view.glade": uiTextViewGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"text-view.glade": &bintree{uiTextViewGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

