// Code generated by go-bindata.
// sources:
// ui/window.glade
// DO NOT EDIT!

package builtin_net_ip

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiWindowGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x4b\x6f\xdb\x3e\x12\xbf\xe7\x53\x70\x75\xfa\x2f\x16\x69\xd2\x16\x59\xec\xc1\x76\x81\x76\xdb\xa2\x40\x0f\x01\x92\x6e\x8f\x06\x2d\x31\x0e\xd7\x8a\xa4\x95\x98\x57\x3f\xfd\xc2\x8f\xd8\x56\x3c\x24\x67\x48\xca\xaf\xb0\x27\x17\xd1\xfc\xf8\x9a\x21\x67\x7e\x9c\x91\x7a\x9f\x9e\xee\x72\xf6\x20\xea\x46\x96\x45\x3f\x79\xff\xee\x3c\x61\xa2\x48\xcb\x4c\x16\xe3\x7e\xf2\xeb\xfa\xdb\xe9\xbf\x92\x4f\x83\x93\xde\xdf\x4e\x4f\xd9\x77\x51\x88\x9a\x2b\x91\xb1\x47\xa9\x6e\xd9\x38\xe7\x99\x60\x1f\xdf\x7d\x38\x7f\x77\xce\x4e\x4f\x07\x27\x3d\x59\x28\x51\xdf\xf0\x54\x0c\x4e\x18\xeb\xd5\xe2\x7f\xf7\xb2\x16\x0d\xcb\xe5\xa8\x9f\x8c\xd5\xe4\x1f\xc9\xaa\xa1\xa9\x58\x72\x36\x7b\xae\x1c\xfd\x57\xa4\x8a\xa5\x39\x6f\x9a\x7e\xf2\x5d\x4d\x7e\xcb\x22\x2b\x1f\x13\x26\xb3\x7e\xf2\x38\xff\x3d\x7d\x90\xb1\x5e\x55\x97\x95\xa8\xd5\x33\x2b\xf8\x9d\xe8\x27\x29\x2f\x86\x37\x65\x7a\xdf\x24\x83\x6f\x3c\x6f\x44\xef\xec\xe5\x81\xc5\xf3\xe9\xad\xcc\xb3\xf9\x6f\xa8\xa1\x4b\x5e\x88\x2c\x79\xf9\xfb\x26\xfe\x83\x6c\xe4\x28\x17\xc9\xe0\xba\xbe\xdf\x00\xb7\x74\x48\x2b\xd2\xea\x13\xdc\xaf\xcf\xe5\x53\xb2\xfe\x84\x43\xcf\x5c\xa6\x4b\x27\x77\xc7\xeb\xb1\x2c\x86\xb9\xb8\x51\xc9\xe0\x82\x28\x55\xcb\xf1\xad\x83\x98\x2a\x2b\xba\xd0\xa8\x54\xaa\xbc\x23\xc8\x95\xb5\x14\x85\xe2\x4a\x96\x45\x32\x78\x10\xb5\x92\x29\xcf\xb1\xc2\x4d\xc5\x53\x59\x8c\x4d\xcd\x6d\xac\x35\xbc\xde\x57\x69\x5d\xe6\xb9\xc8\x7e\xaf\x2b\xbb\xf7\xf2\x5b\x54\x80\x2a\xda\xdc\xf2\xac\x7c\x1c\xaa\xe7\x4a\x24\x03\x59\x18\x45\xc1\x71\xc3\x63\xbf\xae\x85\xf8\x8f\x14\x0b\x73\x57\xd0\xe8\xbd\x66\xc0\x73\x16\x56\xc3\x61\xb3\xdd\xad\xe0\xf9\xe9\xec\xbf\xfd\xa4\x11\xb9\x48\xe7\xaa\x03\x8a\xe9\x46\x7b\xb5\x94\x3b\xd3\xb4\x77\xa6\x9f\xbf\xb3\x39\x24\x30\xe7\xb0\x90\x4e\xa0\x57\xf1\x74\x22\x8b\xb1\x7d\xdd\xc5\x53\xc5\x8b\x8c\xae\x2f\x37\x32\xcf\xe9\x52\x55\xd9\xc8\xf9\x9c\x9e\xeb\xc5\x7a\x67\x60\xef\xc1\x29\xc0\xda\xe0\xe6\x9e\x0b\x75\x2f\x84\xe1\x19\xf7\x5e\x48\xd6\xbe\xd1\xe8\x07\x0a\x0f\xf6\x27\x1f\x89\x7c\xcb\x96\x66\x1d\x36\x24\x9f\xcf\x3a\xca\x54\xcd\x8b\x26\xe7\x8a\x8f\x72\xd1\x4f\x9e\x45\x93\x0c\x2e\xeb\x72\x64\x81\xd3\x1b\x8b\x49\xff\xa1\x6e\xbc\xd8\x80\xd3\x18\x70\x86\x00\x49\xa2\x8c\x81\xe9\x0d\x82\x99\x36\x13\x8a\xbe\x7c\x2d\x54\xfd\x3c\xdf\xa1\xc5\xf4\xe7\xb0\x9a\xce\xfe\xde\x6d\xd5\xe1\x17\xdc\xa5\xcb\x21\xd6\xfb\xfd\x6e\xd7\xfb\xf3\xbd\x52\x65\x31\x5f\xf0\xd1\xec\x37\x69\xc5\xf5\x56\xfb\xbd\xa4\xce\xc9\x56\x0f\xfa\x57\xe2\xb5\x48\x85\x7c\x10\xcd\x30\x13\x37\xfc\x3e\x57\xbb\xd1\xc1\x9d\x6d\x3a\x1f\x42\x2b\x61\x38\x67\x84\x7c\x86\xfa\x7a\x23\x06\x83\xc4\x7b\x23\xd0\xf8\xe1\xb1\x6f\x6a\x62\x23\xff\x08\x62\xdc\xd6\xdc\xd6\xb2\x98\x18\x85\x80\xbe\x6f\xf4\x3b\x46\xac\x07\x1b\xb1\x22\x7d\xdf\x6f\x35\xbf\x83\xf6\xf6\xbd\xf0\x7e\x67\x87\xc9\xf0\x89\xe7\x72\x6c\x73\x84\xb6\x14\xb2\xc2\xa1\x82\xd7\x84\xf9\x4e\x1a\x24\x8f\x33\x02\x8b\xb4\xcd\x18\x2c\xe2\x66\xa3\xb0\x08\x5b\x8d\x43\x27\x4f\x32\x12\x1d\x08\x2e\xea\x62\x46\xdd\x61\x44\xfd\x81\xfa\x41\xd2\x21\x08\x80\xaa\x47\x7e\x93\x61\x9f\x10\x78\x52\xbe\xdc\x8a\xb4\xe5\x77\xa6\xa3\xa1\x4a\xab\x61\x2e\x1b\x25\x0a\x51\x0f\x45\x31\xf5\x23\x33\xc3\xcc\x41\x1d\xd7\xbb\xa2\x5f\xe7\x78\x98\xf1\x40\xc0\xe4\x65\x81\x40\x88\xfe\xa9\x0e\x66\xd3\x4f\x45\x2f\x34\x04\x97\xd5\xfc\x71\x28\x8b\x4c\xa6\x5c\x95\x35\xa5\x6b\x26\xe7\x77\xd5\x9a\xc9\x09\xd6\xf5\x89\x12\x90\xe9\x30\xf0\x3e\xb1\x0e\x01\x1d\x90\xaf\x26\xc4\x3a\x5a\x03\xdb\xb7\x78\xc0\xc1\x9a\x74\x27\xba\x69\x70\xa1\x35\xda\x4b\x07\x09\xa7\xbe\x09\x86\xe0\x01\xb4\x60\xac\x53\xce\x1c\x76\x76\x5d\x27\x9d\x26\x1e\x02\x72\x9d\x7c\x08\x8b\xe6\x3d\x20\x90\xb0\x9e\x04\x02\x0a\xe7\x55\x20\x80\xd0\x1e\x86\x09\x8b\x76\x36\x2e\x51\x50\x2a\xc6\x0c\xf4\xed\xec\x94\x9c\xdb\x49\xeb\xa0\x6c\x14\x57\x53\x15\x40\x40\x07\xd4\x45\x08\xcc\x47\x1f\x21\x3c\xfd\x61\xfe\xd7\x63\x59\x4f\x44\xcd\xe6\x63\xff\x3b\xad\x21\xcc\xa9\xb5\xea\x12\xe6\xf4\xd2\x0d\x80\x44\xe9\xd8\xc0\xe8\xc7\x99\x0e\x89\x7c\xac\x2d\x81\xec\xc7\xdb\xea\x51\xa4\xc2\xfb\x18\x06\xc0\x5b\xbe\x36\x8d\x5a\x39\x5a\x86\x5e\xf9\xae\xa6\xa8\xbe\x6b\xd0\x95\xe1\x85\x80\x73\xe1\x41\x37\x30\xa3\x91\x21\xc9\xfd\x0d\xa0\x83\x33\xb2\xe9\xf1\x1c\xdc\xc6\xca\x2a\x9a\x98\x05\x33\x9a\x18\xf2\xea\x62\x03\x28\xb8\x89\xe1\xd6\x02\x05\xb6\x48\x3f\x99\xc6\x30\x2f\xfe\x9e\x54\xe2\xce\x6a\x62\xbd\x2a\xe7\xa9\xb8\x2d\xf3\x4c\xd4\x9a\x4c\x13\x42\x3f\xba\x0f\xed\xbd\xe2\xc5\x90\xb1\x3d\x72\x7f\xf6\x8f\xed\x6d\x73\x6a\x9f\x4f\xef\xb9\xf4\x9b\x47\x2f\x47\xd2\x32\x7f\xc6\xb9\xa3\x52\xae\x36\x3e\x64\x2f\x49\x57\x07\x0e\x24\x00\xff\xe1\x42\x37\xd9\x79\x8f\xbd\x26\x9b\xdc\xb8\x8e\x40\x3c\x47\x10\x8e\x23\x14\xbf\xe1\xcf\x6d\xb8\x52\x67\x1b\x29\x46\x2d\x9f\xb2\x2a\x51\x71\xdb\x36\x98\x35\x1a\x14\xd6\x27\xc3\xfb\x63\x21\x98\x71\x08\xc7\xcd\x0d\x0b\x12\xe5\x20\xdd\x2f\x82\xb7\xe4\x40\xdd\x5a\xa2\x9a\xa9\x06\x0e\x79\x55\xe5\xcf\x0e\x7a\x68\x88\x6b\x04\x89\x39\xd8\x3f\x05\x0f\x1f\xca\x6c\xcf\x64\xbc\x49\xf2\xd0\x36\x43\x08\x5b\xf6\xc1\x66\x7e\xdc\xf1\xb1\xed\x96\x89\x1d\xca\x85\x87\x2a\xcb\x5c\xc9\x6a\xa8\xc4\x93\x02\x4d\x75\xa1\xce\x6c\xba\x13\x30\xd9\xb0\x8b\x8b\x8b\x7f\x7a\xdd\x1b\xa8\x32\x9d\x24\x83\xb1\x9a\x9c\xca\xe2\xc6\x9a\x18\xb9\x06\xf4\x76\x0d\xe4\xe3\x2e\x0c\xc4\x3e\xdf\xc8\x3b\xdc\xf5\x18\xde\x68\x36\xb4\x8c\xfd\xa5\xd4\x3e\xfb\xd8\x86\x4c\xfe\x12\xcb\x9e\x7b\x2f\xc4\x11\x07\xdc\x08\x77\xcb\x3d\xe0\x26\x97\x1d\xa1\x35\xfe\x28\x6b\x53\xae\xbf\x5c\xb2\x2b\x51\x3f\xc8\xd4\x39\x59\xfc\xf8\x32\xa8\xb7\x5c\xcf\x15\x73\x5a\x8f\x31\xa7\xd5\x2d\xb3\xb3\xd3\xfc\xcc\x62\xa6\x67\xb8\xbc\xc8\x7d\x64\x19\xe9\xe4\x57\x00\xe2\xcb\x9b\xf4\x0a\x41\x78\x05\x51\x2e\x08\xa8\xfb\x6c\xd9\x98\xdf\x17\xf3\xfb\x62\x7e\x9f\x15\xe8\x40\xf3\xfb\x36\xb8\xf0\xfb\xac\xc2\x52\xe0\xd0\x08\xf6\x27\xf1\x61\xfb\x29\x0a\x21\x86\x1c\x93\x80\x30\x74\xf9\x8b\x92\xa2\x59\x72\xd6\x25\x53\x0e\x81\xef\x8f\x1d\xc4\x04\xa0\x8e\xcd\x6b\xe7\x09\x40\x7e\xe6\x85\x65\xd6\xd9\x16\xb5\x3c\xc8\x5a\x77\xce\xb2\x43\x8d\x3a\x33\xed\x2c\x1a\x95\x23\xfb\xce\x3a\x31\xaa\x4e\xb3\xea\xec\x09\x75\x4e\xac\x3c\x3b\x94\x88\x20\x04\x43\xcf\x42\x2e\xd2\x1b\x4a\x39\x8c\xe5\x84\x30\x48\xa4\x1b\x8e\x64\x73\x89\x74\x03\x16\xcb\x99\x85\xd4\x01\x6e\x9f\xbf\xc0\xe9\x2d\xd4\xd7\xbd\xf6\x5d\xdd\x26\x92\x91\x26\x93\x81\x13\x0a\xbd\x1c\x61\x1a\x6e\x8f\x04\x4f\xcb\x02\xf9\x6a\x04\xd3\xd0\x82\xbd\x26\xc1\xd4\x88\xd7\xe2\x42\x80\x9e\x21\x38\x04\xe9\xf9\x2a\x05\x13\xb4\xfb\x6b\x15\x5a\xa8\x84\x70\x84\x91\x43\x12\xa8\xdf\x3e\x4c\x1a\x84\xe7\x1e\x99\x40\x68\xce\xb5\xab\x8c\x16\xa1\x30\x4a\xe8\xcf\x02\xd8\x3c\xc6\xe7\x6a\x21\x6c\xd1\xda\x82\xd9\x84\xa3\x5f\x66\x82\x74\xf4\xd1\x5a\x90\xa4\xa5\x63\x9e\x67\xa0\x6e\x20\xde\x0b\x08\x81\x86\x58\x44\x08\xd7\xdd\xbf\x43\xa0\xba\xf8\x7a\x08\x58\xba\xdf\x87\x00\x75\xf2\x01\x4d\xb8\xee\x5e\xc7\x12\x91\xac\xce\xcc\xc0\x76\xac\xbd\x76\x62\xcd\x05\x21\xbd\x74\xa2\xd5\x4c\x17\x5a\x0f\x01\x87\xd2\x7c\x08\xbb\xa3\x17\x53\xb4\x9a\x24\x9e\xfb\xab\xae\x52\xcf\xff\x95\x64\x40\x7a\xd2\x04\xec\xe7\x10\xe8\x50\xbd\x1c\x83\x25\x28\xcd\x41\x58\x89\x39\x98\x5c\x28\x33\xd5\x5c\xcd\xad\x0c\x15\x7d\x8f\xdc\x6a\x07\x7f\x51\xe7\xf2\x3a\x0c\x53\x53\xdb\xd8\x12\x42\x43\x87\xb8\xce\x6b\xe1\x47\xf3\xa7\xa1\x3a\xdf\xb4\xb7\x40\x8f\xd0\xfc\xd1\x2f\xe7\x68\x35\x43\xb0\x7e\xfa\x8b\x3a\x4c\x2d\x45\xe3\x8f\xc6\x4f\x46\x75\xce\x03\x68\x81\x6e\xcd\xf8\xe9\xeb\x4b\x6e\xc4\xf5\x25\x22\x2d\x0c\xfc\x0b\x45\x3c\xfa\xba\x3b\x82\x2b\x18\xab\xd1\x15\xc3\xe5\x70\x92\x75\xc7\x70\xc5\xbc\x88\x63\x79\x6b\x1e\x85\x69\x3c\xa8\x0b\x1b\x4f\x76\x31\x30\xb3\xe8\x4b\x08\xd3\x18\xc5\x83\xa4\x83\xfd\x59\xc4\x0e\x18\xc4\xe0\xec\x61\x17\xcc\x61\x58\xd6\x30\x04\x01\x0e\x26\xb1\x2f\xa2\x90\xd9\xa7\xf4\x1e\x38\x26\x75\xca\x34\xc8\xae\x19\x72\x77\x58\x17\x8f\xdd\xcd\x5b\x0f\x7d\x5b\x07\x61\xfa\x3b\xe9\xc1\xa3\x73\x07\xe7\xdc\xd1\x67\xf6\xbc\x06\xda\x8c\xc6\x5f\xd9\x00\x29\x5d\x7e\xd9\x10\x3e\x1e\xa7\xa7\xcd\xeb\x1a\xd9\x5f\x73\xeb\x36\x04\xdf\xbd\x31\x07\xbd\xaa\xeb\xd2\x9a\x1d\xc3\xed\xee\xad\x99\xb6\x86\x0e\x17\xfd\xa4\x4c\xe2\xa5\xa8\x73\x46\xf1\x12\xe1\x10\xdd\x3c\xfd\x6e\xf5\x63\xb1\x29\xb2\xbf\x1a\x91\x96\x45\xd6\xcc\xbe\xba\x3b\x16\xb5\xc3\xcd\x59\x67\x4b\x1e\x23\xdf\xfd\xa9\x62\x8b\x15\x01\x01\xed\x15\x6f\xa7\x9f\x67\x3e\x4c\xac\x09\xe8\xb2\x26\x60\x6b\xaf\x21\x8e\x35\x01\xb1\x26\x00\x0b\x14\x6b\x02\x88\x40\xb1\x26\x20\xd6\x04\xc0\x48\x1d\xd5\x04\x10\x3f\x98\x68\x1a\x5c\xac\x0a\x88\x55\x01\xba\x7e\xc7\xaa\x80\xd5\xe3\xb1\x2a\x20\x56\x05\x80\x12\xb1\x2a\x20\x56\x05\xbc\xc9\xaa\x00\xb7\x8f\x51\xb6\x1a\xea\x42\xef\x21\xe0\x58\x17\x40\xfc\x77\x34\xb9\x81\xb1\x2e\xe0\xb5\xa9\xc6\xca\x80\x98\x1c\x8c\x91\x3c\x92\x0d\x20\x56\x06\xbc\xda\x00\x62\x6d\x40\x34\x7f\x84\xe4\x91\x98\x7f\xac\x0d\x58\x08\xc4\xda\x80\x35\x89\xc0\xca\x1d\x6b\x03\x6c\xcf\x1e\x77\x86\xc4\xce\x6b\x03\x62\x86\x44\x87\x57\x98\x7a\x5f\xe7\xe7\xc2\xab\x8a\x39\x12\x5d\xe6\x48\x20\x8f\xf0\xf8\xa9\x66\xbf\x1d\x2a\x7e\x39\xca\x6b\x07\xc1\xef\x1a\xbf\xfe\x7d\x69\x06\x7b\x4b\x5f\x8c\x32\xb8\x34\xf8\x2f\x46\x41\xe3\x87\xc7\xbe\x19\xa9\x35\xf2\x8f\x45\x43\x36\xaf\x99\x6a\x59\x4c\x8c\x73\x05\x74\xfd\x55\xb7\xdb\x5d\x5e\xfb\xe3\xea\x0f\xbd\xb3\x59\xf9\xc0\x0d\x4f\xc5\xe0\xe4\xff\x01\x00\x00\xff\xff\x90\xc4\x8b\xad\xc4\xa7\x00\x00")

func uiWindowGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiWindowGlade,
		"ui/window.glade",
	)
}

func uiWindowGlade() (*asset, error) {
	bytes, err := uiWindowGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/window.glade", size: 42948, mode: os.FileMode(420), modTime: time.Unix(1500535605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/window.glade": uiWindowGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"window.glade": &bintree{uiWindowGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

